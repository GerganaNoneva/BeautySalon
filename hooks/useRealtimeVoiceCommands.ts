import { useState, useEffect, useRef, useCallback } from 'react';
import { Platform } from 'react-native';
import { ExpoWebSpeechRecognition } from 'expo-speech-recognition';
import { parseVoiceCommand, ParsedVoiceCommand } from '@/utils/voiceCommandParser';

interface UseRealtimeVoiceCommandsOptions {
  onCommand: (command: ParsedVoiceCommand) => void;
  openAiApiKey: string;
  language?: string;
  continuous?: boolean;
}

interface UseRealtimeVoiceCommandsReturn {
  isListening: boolean;
  transcript: string;
  startListening: () => void;
  stopListening: () => void;
  isSupported: boolean;
  error: string | null;
  isProcessing: boolean;
}

export function useRealtimeVoiceCommands({
  onCommand,
  openAiApiKey,
  language = 'bg-BG',
  continuous = true,
}: UseRealtimeVoiceCommandsOptions): UseRealtimeVoiceCommandsReturn {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [isSupported, setIsSupported] = useState(true); // expo-speech-recognition —Ä–∞–±–æ—Ç–∏ –Ω–∞–≤—Å—è–∫—ä–¥–µ
  const [isProcessing, setIsProcessing] = useState(false);

  const recognitionRef = useRef<ExpoWebSpeechRecognition | null>(null);
  const lastCommandTimeRef = useRef<number>(0);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
  const handleTranscript = useCallback(async (transcriptResult: string) => {
    console.log('üé§ Realtime transcript:', transcriptResult);
    setTranscript(transcriptResult);

    const now = Date.now();
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞–º–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏—è (debounce 2 —Å–µ–∫—É–Ω–¥–∏)
    if (now - lastCommandTimeRef.current < 2000) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è—Ç–∞ –µ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –¥—ä–ª–≥–∞
    if (transcriptResult.trim().length < 5) {
      return;
    }

    try {
      setIsProcessing(true);
      lastCommandTimeRef.current = now;

      // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ AI –∑–∞ –ø–∞—Ä—Å–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞
      console.log('ü§ñ Parsing command with AI...');
      const parsedCommand = await parseVoiceCommand(transcriptResult, openAiApiKey);

      console.log('‚úÖ Parsed command:', parsedCommand);

      // –ê–∫–æ –∫–æ–º–∞–Ω–¥–∞—Ç–∞ –µ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ —Å –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–∞ —É–≤–µ—Ä–µ–Ω–æ—Å—Ç
      if (parsedCommand.type !== 'unknown' && parsedCommand.confidence > 0.7) {
        // –ò–∑–≤–∏–∫–≤–∞–º–µ callback-–∞ —Å –∫–æ–º–∞–Ω–¥–∞—Ç–∞
        onCommand(parsedCommand);

        // –°–ø–∏—Ä–∞–º–µ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ—Ç–æ —Å–ª–µ–¥ –∏–∑–ø—ä–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
        stopListening();
      } else {
        console.log('‚ö†Ô∏è Command not recognized or low confidence:', parsedCommand.confidence);
        setError('–ö–æ–º–∞–Ω–¥–∞—Ç–∞ –Ω–µ –±–µ—à–µ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.');
      }
    } catch (error) {
      console.error('Error parsing command:', error);
      setError('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞');
    } finally {
      setIsProcessing(false);
    }
  }, [openAiApiKey, onCommand]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Speech Recognition
  useEffect(() => {
    const recognition = new ExpoWebSpeechRecognition();
    recognition.lang = language;
    recognition.continuous = continuous;
    recognition.interimResults = true;
    recognition.maxAlternatives = 1;

    recognition.onstart = () => {
      console.log('üé§ Speech recognition started');
      setIsListening(true);
      setError(null);
    };

    recognition.onresult = (event: any) => {
      const results = event.results;
      if (results && results.length > 0) {
        const result = results[results.length - 1];
        if (result && result.length > 0) {
          const transcriptResult = result[0].transcript;
          handleTranscript(transcriptResult);
        }
      }
    };

    recognition.onerror = (event: any) => {
      console.error('‚ùå Speech recognition error:', event.error);

      const errorMsg = event.error || 'unknown';

      if (errorMsg === 'no-speech') {
        setError('–ù—è–º–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞—Ç –≥–ª–∞—Å');
      } else if (errorMsg === 'audio-capture') {
        setError('–ù—è–º–∞ –¥–æ—Å—Ç—ä–ø –¥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω');
      } else if (errorMsg === 'not-allowed') {
        setError('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ—Ç–æ –∑–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –µ –æ—Ç–∫–∞–∑–∞–Ω–æ');
      } else {
        setError(`–ì—Ä–µ—à–∫–∞: ${errorMsg}`);
      }

      setIsListening(false);
    };

    recognition.onend = () => {
      console.log('üé§ Speech recognition ended');
      setIsListening(false);
    };

    recognitionRef.current = recognition;

    return () => {
      if (recognitionRef.current) {
        try {
          recognitionRef.current.stop();
        } catch (e) {
          // Ignore
        }
      }
    };
  }, [continuous, language, handleTranscript]);

  const startListening = useCallback(() => {
    if (!isSupported) {
      setError('–ì–ª–∞—Å–æ–≤–æ—Ç–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–µ –µ –ø–æ–¥–¥—ä—Ä–∂–∞–Ω–æ –Ω–∞ —Ç–æ–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
      return;
    }

    if (recognitionRef.current && !isListening) {
      try {
        setTranscript('');
        setError(null);
        recognitionRef.current.start();
      } catch (error) {
        console.error('Error starting recognition:', error);
        setError('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ—Ç–æ');
      }
    }
  }, [isSupported, isListening]);

  const stopListening = useCallback(() => {
    if (recognitionRef.current && isListening) {
      try {
        recognitionRef.current.stop();
      } catch (error) {
        console.error('Error stopping recognition:', error);
      }
    }
  }, [isListening]);

  return {
    isListening,
    transcript,
    startListening,
    stopListening,
    isSupported,
    error,
    isProcessing,
  };
}
